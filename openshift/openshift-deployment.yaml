apiVersion: apps/v1
kind: Deployment
metadata:
  name: meteorologia-mock-api
  labels:
    app: meteorologia-mock-api
    app.kubernetes.io/name: meteorologia-mock-api
    app.kubernetes.io/component: microservice
    app.kubernetes.io/part-of: meteorologia-platform
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: meteorologia-mock-api
  template:
    metadata:
      labels:
        app: meteorologia-mock-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/q/metrics"
    spec:
      containers:
      - name: meteorologia-mock-api
        image: meteorologia-mock-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
          name: http
        env:
        - name: QUARKUS_HTTP_PORT
          value: "8080"
        - name: QUARKUS_HTTP_HOST
          value: "0.0.0.0"
        - name: JAVA_OPTIONS
          value: "-Xms128m -Xmx512m"
        - name: QUARKUS_LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/weather/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/weather/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 185
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30